document.addEventListener("DOMContentLoaded", function () {
    const categoryTable = document.getElementById("category-list");

    //C√°c ph·∫ßn t·ª≠ s·ª≠a danh m·ª•c
    const overlayEditCategory = document.getElementById("overlay-edit-category");
    const popupEditCategory = document.getElementById("popup-edit-category");
    const cancelEditCategoryBtn = document.getElementById("cancelEditCategory");
    const editCategoryNameInput = document.getElementById("editCategoryName");
    const editCategoryForm = document.getElementById("editCategoryForm");

    //C√°c ph·∫ßn t·ª≠ x√≥a danh m·ª•c
    const overlayDeleteCategory = document.getElementById("overlay-delete-category");
    const popupDeleteCategory = document.getElementById("confirm-delete-popup");
    const deleteCategoryForm = document.getElementById("deleteCategoryForm");
    const confirmDeleteCategory = document.getElementById("confirmDeleteCategory");
    const cancelDeleteCategory = document.getElementById("cancelDeleteCategory");

    // H√†m ƒë√≥ng/m·ªü popup chung
    function togglePopup(popup, overlay, isOpen) {
        overlay.style.display = isOpen ? "block" : "none";
        popup.style.display = isOpen ? "block" : "none";
    }

    // L·∫•y danh s√°ch danh m·ª•c t·ª´ API 
    async function loadCategories() {
        try {
            const response = await fetch("http://localhost:5000/api/categories");
            if (!response.ok) throw new Error("‚ö† Kh√¥ng th·ªÉ t·∫£i danh m·ª•c!");

            const categories = await response.json();
            categoryTable.innerHTML = "";
            if (!Array.isArray(categories) || categories.length === 0) {
                categoryTable.innerHTML = `<tr><td colspan="3">Kh√¥ng c√≥ danh m·ª•c n√†o.</td></tr>`;
                return;
            }

            categories.forEach((category, index) => addCategoryRow(category, index));
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i danh m·ª•c:", error);
            alert(error.message);
        }
    }

    //  Th√™m m·ªôt h√†ng danh m·ª•c v√†o b·∫£ng 
    function addCategoryRow(category, index) {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>${category.name}</td>
            <td>
                <button class="btn view" data-id="${category.id}" data-action="view">üëÅ Xem s·∫£n ph·∫©m</button>
                <button class="btn edit" data-id="${category.id}" data-name="${category.name}" data-action="edit">‚úèÔ∏è S·ª≠a</button>
                <button class="btn delete" data-id="${category.id}" data-action="delete">üóëÔ∏è X√≥a</button>
                <button class="btn add" data-id="${category.id}" data-action="add-product">‚ûï Th√™m s·∫£n ph·∫©m</button>
            </td>
        `;
        categoryTable.appendChild(row);
    }
    
    // X·ª≠ l√Ω s·ª± ki·ªán tr√™n b·∫£ng danh m·ª•c 
    categoryTable.addEventListener("click", function (event) {
        const button = event.target.closest("button");
        if (!button) return;

        const action = button.dataset.action;
        const categoryId = button.dataset.id;
        const categoryName = button.dataset.name;

        if (action === "edit") {
            openEditCategoryPopup(categoryId, categoryName);
        } else if (action === "delete") {
            openDeleteCategoryPopup(categoryId);
        } else if (action === "view") {
            viewProducts(categoryId);
        } else if (action === "add-product") {
            addProductToCategory(categoryId);
        }
    });

    // M·ªü popup s·ª≠a danh m·ª•c 
    function openEditCategoryPopup(categoryId, categoryName) {
        editCategoryNameInput.value = categoryName;
        popupEditCategory.setAttribute("data-id", categoryId);
        togglePopup(popupEditCategory, overlayEditCategory, true);
    }

    // X·ª≠ l√Ω l∆∞u thay ƒë·ªïi danh m·ª•c 
    editCategoryForm.addEventListener("submit", async function (event) {
        event.preventDefault();
        const categoryId = popupEditCategory.getAttribute("data-id");
        const newName = editCategoryNameInput.value.trim();

        if (!newName) {
            alert("‚ùå Vui l√≤ng nh·∫≠p t√™n danh m·ª•c m·ªõi!");
            return;
        }

        try {
            const response = await fetch(`http://localhost:5000/api/categories/${categoryId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name: newName })
            });

            if (!response.ok) {
                alert("‚ö† L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c!");
                return;
            }

            alert("üéâ C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
            closeEditCategoryPopup();
            loadCategories();
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ª≠i request:", error);
            alert("‚ö† Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c! Ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
        }
    });

    // ƒê√≥ng popup s·ª≠a danh m·ª•c
    function closeEditCategoryPopup() {
        togglePopup(popupEditCategory, overlayEditCategory, false);
    }
    cancelEditCategoryBtn.addEventListener("click", closeEditCategoryPopup);

    // M·ªü popup x√≥a danh m·ª•c
    function openDeleteCategoryPopup(categoryId) {
        popupDeleteCategory.setAttribute("data-id", categoryId);
        togglePopup(popupDeleteCategory, overlayDeleteCategory, true);
    }
    
    // H√†m x√≥a danh m·ª•c
    document.getElementById("confirmDeleteCategory").addEventListener("click", async function () {       
        // L·∫•y categoryId t·ª´ popup
        const categoryId = popupDeleteCategory.getAttribute("data-id");
    
        try {
            const response = await fetch(`http://localhost:5000/api/categories/${categoryId}`, {
                method: "DELETE",
            });
    
            if (!response.ok) {
                alert("‚ö† L·ªói khi x√≥a danh m·ª•c!");
                return;
            }
    
            alert("üóëÔ∏è Danh m·ª•c ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
            closeDeleteCategoryPopup();  // ƒê√≥ng popup x√≥a
            loadCategories();  // T·∫£i l·∫°i danh m·ª•c sau khi x√≥a
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ª≠i request:", error);
            alert("‚ö† Kh√¥ng th·ªÉ x√≥a danh m·ª•c! Ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
        }
    });
    
    // H√†m ƒë√≥ng popup x√≥a
    function closeDeleteCategoryPopup() {
        togglePopup(popupDeleteCategory, overlayDeleteCategory, false);
    }
    cancelDeleteCategory.addEventListener("click", closeDeleteCategoryPopup);

    // Load danh m·ª•c khi trang ƒë∆∞·ª£c t·∫£i
    loadCategories();
});



// /** üè∑ X√≥a danh m·ª•c */
//     async function deleteCategory(id) {
//         if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?")) return;

//         try {
//             const response = await fetch(`http://localhost:5000/api/categories/${id}`, { method: "DELETE" });
//             if (!response.ok) throw new Error("‚ö† L·ªói x√≥a danh m·ª•c");

//             alert("üóëÔ∏è Danh m·ª•c ƒë√£ ƒë∆∞·ª£c x√≥a!");
//             location.reload();
//         } catch (error) {
//             console.error("‚ùå L·ªói x√≥a danh m·ª•c:", error);
//             alert("‚ö† Kh√¥ng th·ªÉ x√≥a danh m·ª•c!");
//         }
//     }

//     /** üè∑ Xem s·∫£n ph·∫©m trong danh m·ª•c */
//     async function viewProducts(categoryId) {
//         try {
//             const response = await fetch(`http://localhost:5000/api/categories/${categoryId}/products`);
//             if (!response.ok) throw new Error("‚ö† Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!");

//             const products = await response.json();
//             alert(`üìå S·∫£n ph·∫©m trong danh m·ª•c: ${products.map(p => p.name).join(", ") || "Kh√¥ng c√≥ s·∫£n ph·∫©m."}`);
//         } catch (error) {
//             console.error("‚ùå L·ªói t·∫£i s·∫£n ph·∫©m:", error);
//             alert("‚ö† Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!");
//         }
//     }
