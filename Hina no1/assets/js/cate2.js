document.addEventListener("DOMContentLoaded", function () {
    const categoryTable = document.getElementById("category-list");

    //C√°c ph·∫ßn t·ª≠ s·ª≠a danh m·ª•c
    const overlayEditCategory = document.getElementById("overlay-edit-category");
    const popupEditCategory = document.getElementById("popup-edit-category");
    const cancelEditCategoryBtn = document.getElementById("cancelEditCategory");
    const editCategoryNameInput = document.getElementById("editCategoryName");
    const editCategoryForm = document.getElementById("editCategoryForm");

    //C√°c ph·∫ßn t·ª≠ x√≥a danh m·ª•c
    const overlayDeleteCategory = document.getElementById("overlay-delete-category");
    const popupDeleteCategory = document.getElementById("confirm-delete-popup");
    const deleteCategoryForm = document.getElementById("deleteCategoryForm");
    const confirmDeleteCategory = document.getElementById("confirmDeleteCategory");
    const cancelDeleteCategory = document.getElementById("cancelDeleteCategory");

    // Kh·ªüi t·∫°o c√°c bi·∫øn
    let currentCategoryId = null;
    let selectedProducts = new Set();

    // H√†m ƒë√≥ng/m·ªü popup chung
    function togglePopup(popup, overlay, isOpen) {
        overlay.style.display = isOpen ? "block" : "none";
        popup.style.display = isOpen ? "block" : "none";
    }

    // L·∫•y danh s√°ch danh m·ª•c t·ª´ API 
    async function loadCategories() {
        try {
            const response = await fetch("http://localhost:5000/api/categories");
            if (!response.ok) throw new Error("‚ö† Kh√¥ng th·ªÉ t·∫£i danh m·ª•c!");

            const categories = await response.json();
            categoryTable.innerHTML = "";
            if (!Array.isArray(categories) || categories.length === 0) {
                categoryTable.innerHTML = `<tr><td colspan="3">Kh√¥ng c√≥ danh m·ª•c n√†o.</td></tr>`;
                return;
            }

            categories.forEach((category, index) => addCategoryRow(category, index));
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i danh m·ª•c:", error);
            alert(error.message);
        }
    }

    //  Th√™m m·ªôt h√†ng danh m·ª•c v√†o b·∫£ng 
    function addCategoryRow(category, index) {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>${category.name}</td>
            <td>
                <button class="btn view" data-id="${category.id}" data-action="view">üëÅ Xem s·∫£n ph·∫©m</button>
                <button class="btn edit" data-id="${category.id}" data-name="${category.name}" data-action="edit">‚úèÔ∏è S·ª≠a</button>
                <button class="btn delete" data-id="${category.id}" data-action="delete">üóëÔ∏è X√≥a</button>
                <button class="btn add" data-id="${category.id}" data-action="add-product">‚ûï Th√™m s·∫£n ph·∫©m</button>
            </td>
        `;
        categoryTable.appendChild(row);
    }
    
    // X·ª≠ l√Ω s·ª± ki·ªán tr√™n b·∫£ng danh m·ª•c 
    categoryTable.addEventListener("click", function (event) {
        const button = event.target.closest("button");
        if (!button) return;

        const action = button.dataset.action;
        const categoryId = button.dataset.id;
        const categoryName = button.dataset.name;

        if (action === "edit") {
            openEditCategoryPopup(categoryId, categoryName);
        } else if (action === "delete") {
            openDeleteCategoryPopup(categoryId);
        } else if (action === "view") {
            viewProducts(categoryId);
        } else if (action === "add-product") {
            addProductToCategory(categoryId);
        }
    });

    // M·ªü popup s·ª≠a danh m·ª•c 
    function openEditCategoryPopup(categoryId, categoryName) {
        editCategoryNameInput.value = categoryName;
        popupEditCategory.setAttribute("data-id", categoryId);
        togglePopup(popupEditCategory, overlayEditCategory, true);
    }

    // X·ª≠ l√Ω l∆∞u thay ƒë·ªïi danh m·ª•c 
    editCategoryForm.addEventListener("submit", async function (event) {
        event.preventDefault();
        const categoryId = popupEditCategory.getAttribute("data-id");
        const newName = editCategoryNameInput.value.trim();

        if (!newName) {
            alert("‚ùå Vui l√≤ng nh·∫≠p t√™n danh m·ª•c m·ªõi!");
            return;
        }

        try {
            const response = await fetch(`http://localhost:5000/api/categories/${categoryId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name: newName })
            });

            if (!response.ok) {
                alert("‚ö† L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c!");
                return;
            }

            alert("üéâ C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
            closeEditCategoryPopup();
            loadCategories();
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ª≠i request:", error);
            alert("‚ö† Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c! Ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
        }
    });

    // ƒê√≥ng popup s·ª≠a danh m·ª•c
    function closeEditCategoryPopup() {
        togglePopup(popupEditCategory, overlayEditCategory, false);
    }
    cancelEditCategoryBtn.addEventListener("click", closeEditCategoryPopup);

    // M·ªü popup x√≥a danh m·ª•c
    function openDeleteCategoryPopup(categoryId) {
        popupDeleteCategory.setAttribute("data-id", categoryId);
        togglePopup(popupDeleteCategory, overlayDeleteCategory, true);
    }
    
    // H√†m x√≥a danh m·ª•c
    document.getElementById("confirmDeleteCategory").addEventListener("click", async function () {       
        // L·∫•y categoryId t·ª´ popup
        const categoryId = popupDeleteCategory.getAttribute("data-id");
    
        try {
            const response = await fetch(`http://localhost:5000/api/categories/${categoryId}`, {
                method: "DELETE",
            });
    
            if (!response.ok) {
                alert("‚ö† L·ªói khi x√≥a danh m·ª•c!");
                return;
            }
    
            alert("üóëÔ∏è Danh m·ª•c ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
            closeDeleteCategoryPopup();  // ƒê√≥ng popup x√≥a
            loadCategories();  // T·∫£i l·∫°i danh m·ª•c sau khi x√≥a
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ª≠i request:", error);
            alert("‚ö† Kh√¥ng th·ªÉ x√≥a danh m·ª•c! Ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
        }
    });
    
    // H√†m ƒë√≥ng popup x√≥a
    function closeDeleteCategoryPopup() {
        togglePopup(popupDeleteCategory, overlayDeleteCategory, false);
    }
    cancelDeleteCategory.addEventListener("click", closeDeleteCategoryPopup);

    // H√†m l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ API
    async function fetchProducts() {
        try {
            const response = await fetch('http://localhost:5000/api/products');
            const products = await response.json();
            return products;
        } catch (error) {
            console.error('Error fetching products:', error);
            return [];
        }
    }

    // H√†m l·∫•y s·∫£n ph·∫©m theo danh m·ª•c
    async function fetchProductsByCategory(categoryId) {
        try {
            const response = await fetch(`http://localhost:5000/api/categories/${categoryId}/products`);
            const products = await response.json();
            return products;
        } catch (error) {
            console.error('Error fetching products by category:', error);
            return [];
        }
    }

    // H√†m th√™m s·∫£n ph·∫©m v√†o danh m·ª•c
    async function addProductToCategory(categoryId, productId) {
        try {
            const response = await fetch(`http://localhost:5000/api/categories/${categoryId}/products`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });
            return response.ok;
        } catch (error) {
            console.error('Error adding product to category:', error);
            return false;
        }
    }

    // H√†m x√≥a s·∫£n ph·∫©m kh·ªèi danh m·ª•c
    async function removeProductFromCategory(categoryId, productId) {
        try {
            const response = await fetch(`http://localhost:5000/api/categories/${categoryId}/products/${productId}`, {
                method: 'DELETE'
            });
            return response.ok;
        } catch (error) {
            console.error('Error removing product from category:', error);
            return false;
        }
    }

    // H√†m hi·ªÉn th·ªã popup th√™m s·∫£n ph·∫©m
    async function showAddProductPopup(categoryId) {
        currentCategoryId = categoryId;
        const products = await fetchProducts();
        const productSelect = document.getElementById('productSelect');
        const selectedProductsList = document.getElementById('selectedProducts');
        
        // X√≥a c√°c options c≈©
        productSelect.innerHTML = '<option value="">-- Ch·ªçn s·∫£n ph·∫©m --</option>';
        selectedProductsList.innerHTML = '';
        selectedProducts.clear();

        // Th√™m c√°c options m·ªõi
        products.forEach(product => {
            const option = document.createElement('option');
            option.value = product.id;
            option.textContent = product.name;
            productSelect.appendChild(option);
        });

        // Hi·ªÉn th·ªã popup
        document.getElementById('overlay-add-product').style.display = 'block';
        document.getElementById('popup-add-product-category').style.display = 'block';
    }

    // H√†m hi·ªÉn th·ªã popup xem s·∫£n ph·∫©m
    async function showViewProductsPopup(categoryId) {
        currentCategoryId = categoryId;
        const products = await fetchProductsByCategory(categoryId);
        const productList = document.getElementById('productList');
        
        // X√≥a danh s√°ch c≈©
        productList.innerHTML = '';

        // Th√™m danh s√°ch m·ªõi
        products.forEach(product => {
            const productItem = document.createElement('div');
            productItem.className = 'product-item';
            productItem.innerHTML = `
                <input type="checkbox" value="${product.id}">
                <span>${product.name}</span>
            `;
            productList.appendChild(productItem);
        });

        // Hi·ªÉn th·ªã popup
        document.getElementById('overlay-view-product').style.display = 'block';
        document.getElementById('popup-view-product').style.display = 'block';
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', () => {
        // X·ª≠ l√Ω th√™m s·∫£n ph·∫©m v√†o danh m·ª•c
        const addProductBtn = document.getElementById('addProductBtn');
        const productSelect = document.getElementById('productSelect');
        const selectedProductsList = document.getElementById('selectedProducts');
        const addProductToCategoryForm = document.getElementById('addProductToCategoryForm');

        addProductBtn.addEventListener('click', () => {
            const productId = productSelect.value;
            if (productId && !selectedProducts.has(productId)) {
                selectedProducts.add(productId);
                const li = document.createElement('li');
                li.textContent = productSelect.options[productSelect.selectedIndex].text;
                li.dataset.productId = productId;
                selectedProductsList.appendChild(li);
                productSelect.value = '';
            }
        });

        addProductToCategoryForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (currentCategoryId && selectedProducts.size > 0) {
                for (const productId of selectedProducts) {
                    await addProductToCategory(currentCategoryId, productId);
                }
                alert('Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!');
                closeAddProductPopup();
            }
        });

        // X·ª≠ l√Ω xem s·∫£n ph·∫©m trong danh m·ª•c
        const removeProductBtn = document.getElementById('removeProductBtn');
        const clearSelectionBtn = document.getElementById('clearSelectionBtn');

        removeProductBtn.addEventListener('click', async () => {
            const checkboxes = document.querySelectorAll('#productList input[type="checkbox"]:checked');
            for (const checkbox of checkboxes) {
                const productId = checkbox.value;
                await removeProductFromCategory(currentCategoryId, productId);
            }
            showViewProductsPopup(currentCategoryId); // Refresh danh s√°ch
        });

        clearSelectionBtn.addEventListener('click', () => {
            const checkboxes = document.querySelectorAll('#productList input[type="checkbox"]');
            checkboxes.forEach(checkbox => checkbox.checked = false);
        });
    });

    // H√†m ƒë√≥ng popup th√™m s·∫£n ph·∫©m
    function closeAddProductPopup() {
        document.getElementById('overlay-add-product').style.display = 'none';
        document.getElementById('popup-add-product-category').style.display = 'none';
    }

    // H√†m ƒë√≥ng popup xem s·∫£n ph·∫©m
    function closeViewProductsPopup() {
        document.getElementById('overlay-view-product').style.display = 'none';
        document.getElementById('popup-view-product').style.display = 'none';
    }

    // Th√™m event listeners cho n√∫t ƒë√≥ng popup
    document.getElementById('cancelAddProduct').addEventListener('click', closeAddProductPopup);
    document.getElementById('cancelViewProduct').addEventListener('click', closeViewProductsPopup);

    // Load danh m·ª•c khi trang ƒë∆∞·ª£c t·∫£i
    loadCategories();
});


//     /** üè∑ Xem s·∫£n ph·∫©m trong danh m·ª•c */
//     async function viewProducts(categoryId) {
//         try {
//             const response = await fetch(`http://localhost:5000/api/categories/${categoryId}/products`);
//             if (!response.ok) throw new Error("‚ö† Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!");

//             const products = await response.json();
//             alert(`üìå S·∫£n ph·∫©m trong danh m·ª•c: ${products.map(p => p.name).join(", ") || "Kh√¥ng c√≥ s·∫£n ph·∫©m."}`);
//         } catch (error) {
//             console.error("‚ùå L·ªói t·∫£i s·∫£n ph·∫©m:", error);
//             alert("‚ö† Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m!");
//         }
//     }
