document.addEventListener("DOMContentLoaded", function () {
    const categoryTable = document.getElementById("category-list");
    
    //C√°c ph·∫ßn t·ª≠ x·ª≠ l√Ω th√™m m·ªõi danh m·ª•c
    const overlayAddCategory = document.getElementById("overlay-add-category");
    const popupAddCategory = document.getElementById("popup-add-category");
    const openPopupAddCategoryBtn = document.getElementById("openAddCategory");
    const cancelAddCategoryBtn = document.getElementById("cancelAddCategory");
    const addCategoryForm = document.getElementById("addCategoryForm");
    const categoryNameInput = document.getElementById("categoryName");

    // H√†m ƒë√≥ng/m·ªü popup chung
    function togglePopup(popup, overlay, isOpen) {
        overlay.style.display = isOpen ? "block" : "none";
        popup.style.display = isOpen ? "block" : "none";
    }

    // L·∫•y danh s√°ch danh m·ª•c t·ª´ API 
    async function loadCategories() {
        try {
            const response = await fetch("http://localhost:5000/api/categories");
            if (!response.ok) throw new Error("‚ö† Kh√¥ng th·ªÉ t·∫£i danh m·ª•c!");

            const categories = await response.json();
            categoryTable.innerHTML = "";
            if (!Array.isArray(categories) || categories.length === 0) {
                categoryTable.innerHTML = `<tr><td colspan="3">Kh√¥ng c√≥ danh m·ª•c n√†o.</td></tr>`;
                return;
            }

            categories.forEach((category, index) => addCategoryRow(category, index));
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i danh m·ª•c:", error);
            alert(error.message);
        }
    }

    //  Th√™m m·ªôt h√†ng danh m·ª•c v√†o b·∫£ng 
    function addCategoryRow(category, index) {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>${category.name}</td>
            <td>
                <button class="btn view" data-id="${category.id}" data-action="view">üëÅ Xem s·∫£n ph·∫©m</button>
                <button class="btn edit" data-id="${category.id}" data-name="${category.name}" data-action="edit">‚úèÔ∏è S·ª≠a</button>
                <button class="btn delete" data-id="${category.id}" data-action="delete">üóëÔ∏è X√≥a</button>
                <button class="btn add" data-id="${category.id}" data-action="add-product">‚ûï Th√™m s·∫£n ph·∫©m</button>
            </td>
        `;
        categoryTable.appendChild(row);
    }
    
    // M·ªü popup th√™m danh m·ª•c 
    function openAddCategoryPopup() {
        togglePopup(popupAddCategory, overlayAddCategory, true);
    }
    openPopupAddCategoryBtn.addEventListener("click", () => openAddCategoryPopup());

    // X·ª≠ l√Ω th√™m danh m·ª•c
    if (addCategoryForm) {
        addCategoryForm.addEventListener("submit", async function (event) {
            event.preventDefault();

            const name = categoryNameInput.value.trim();
            if (!name) {
                alert("‚ùå Vui l√≤ng nh·∫≠p t√™n danh m·ª•c!");
                return;
            }

            try {
                const response = await fetch("http://localhost:5000/api/categories", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name })
                });

                if (!response.ok) {
                    const data = await response.json();
                    alert(data.message || "L·ªói khi th√™m danh m·ª•c!");
                    return;
                }

                alert("üéâ Danh m·ª•c ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
                closeAddCategoryPopup();
                categoryNameInput.value = "";
                loadCategories();
            } catch (error) {
                console.error("‚ùå L·ªói khi g·ª≠i request:", error);
                alert("‚ö† Kh√¥ng th·ªÉ th√™m danh m·ª•c! Ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
            }
        });
    }

    // ƒê√≥ng popup th√™m danh m·ª•c
    function closeAddCategoryPopup() {
        togglePopup(popupAddCategory, overlayAddCategory, false);
    }
    cancelAddCategoryBtn.addEventListener("click", () => closeAddCategoryPopup());

    // Load danh m·ª•c khi trang ƒë∆∞·ª£c t·∫£i
    loadCategories();
});
